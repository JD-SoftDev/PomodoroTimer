@using PomodoroTimer.Models

<RadzenRow class="rz-background-color-base-800 rz-border-radius-6 rz-shadow-3 rz-p-1" Style="max-width: 400px;">
    <RadzenColumn Size="6">
        <RadzenRow AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
            <RadzenText TextStyle="TextStyle.H4">@Task.Name</RadzenText>
        </RadzenRow>
    </RadzenColumn>

    <RadzenColumn Size="2" >
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height:max-content;">
            <RadzenText>@($"{Task.CurrentNumberOfPomodoros} of {Task.NumberOfPomodorosToComplete}")</RadzenText>
        </RadzenRow>
    </RadzenColumn>
    <RadzenColumn Size="4" >
        <RadzenRow AlignItems="AlignItems.End" JustifyContent="JustifyContent.Center" Style="height:max-content;">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="arrow_upward" Click="@MoveToTopButtonAsync"></RadzenButton>
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@RemoveButtonAsync"></RadzenButton>
        </RadzenRow>
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter] public PomodoroTimerTask Task { get; set; }
    [Parameter] public EventCallback<PomodoroTimerTask> OnMoveToTopButtonClicked { get; set; }
    [Parameter] public EventCallback<PomodoroTimerTask> OnRemoveButtonClicked { get; set; }

    private async void MoveToTopButtonAsync()
    {
        await OnMoveToTopButtonClicked.InvokeAsync(Task);
    }

    private async void RemoveButtonAsync()
    {
        await OnRemoveButtonClicked.InvokeAsync(Task);
    }

    
}
